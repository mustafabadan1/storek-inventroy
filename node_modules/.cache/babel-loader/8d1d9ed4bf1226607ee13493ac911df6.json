{"ast":null,"code":"import _slicedToArray from\"C:\\\\Users\\\\musta\\\\OneDrive\\\\Desktop\\\\windmill-dashboard-react-master\\\\my-project\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from'react';import PageTitle from'../components/Typography/PageTitle';import SectionTitle from'../components/Typography/SectionTitle';// import CTA from '../components/CTA'\nimport{Table,TableHeader,TableCell,TableBody,TableRow,TableFooter,TableContainer,Badge,Avatar,Button,Pagination}from'@windmill/react-ui';import{EditIcon,TrashIcon}from'../icons';import response from'../utils/demo/tableData';// make a copy of the data, for the second table\nvar response2=response.concat([]);function Tables(){/**\n   * DISCLAIMER: This code could be badly improved, but for the sake of the example\n   * and readability, all the logic for both table are here.\n   * You would be better served by dividing each table in its own\n   * component, like Table(?) and TableWithActions(?) hiding the\n   * presentation details away from the page view.\n   */ // setup pages control for every table\nvar _useState=useState(1),_useState2=_slicedToArray(_useState,2),pageTable1=_useState2[0],setPageTable1=_useState2[1];var _useState3=useState(1),_useState4=_slicedToArray(_useState3,2),pageTable2=_useState4[0],setPageTable2=_useState4[1];// setup data for every table\nvar _useState5=useState([]),_useState6=_slicedToArray(_useState5,2),dataTable1=_useState6[0],setDataTable1=_useState6[1];var _useState7=useState([]),_useState8=_slicedToArray(_useState7,2),dataTable2=_useState8[0],setDataTable2=_useState8[1];// pagination setup\nvar resultsPerPage=10;var totalResults=response.length;// pagination change control\nfunction onPageChangeTable1(p){setPageTable1(p);}// pagination change control\nfunction onPageChangeTable2(p){setPageTable2(p);}// on page change, load new sliced data\n// here you would make another server request for new data\nuseEffect(function(){setDataTable1(response.slice((pageTable1-1)*resultsPerPage,pageTable1*resultsPerPage));},[pageTable1]);// on page change, load new sliced data\n// here you would make another server request for new data\nuseEffect(function(){setDataTable2(response2.slice((pageTable2-1)*resultsPerPage,pageTable2*resultsPerPage));},[pageTable2]);return/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(PageTitle,null,\"Inventroy\"),/*#__PURE__*/React.createElement(SectionTitle,null),/*#__PURE__*/React.createElement(TableContainer,{className:\"mb-8\"},/*#__PURE__*/React.createElement(Table,null,/*#__PURE__*/React.createElement(TableHeader,null,/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(TableCell,null,\"Client\"),/*#__PURE__*/React.createElement(TableCell,null,\"Amount\"),/*#__PURE__*/React.createElement(TableCell,null,\"Status\"),/*#__PURE__*/React.createElement(TableCell,null,\"Date\"),/*#__PURE__*/React.createElement(TableCell,null,\"Actions\"))),/*#__PURE__*/React.createElement(TableBody,null,dataTable2.map(function(user,i){return/*#__PURE__*/React.createElement(TableRow,{key:i},/*#__PURE__*/React.createElement(TableCell,null,/*#__PURE__*/React.createElement(\"div\",{className:\"flex items-center text-sm\"},/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"p\",{className:\"font-semibold\"},user.name),/*#__PURE__*/React.createElement(\"p\",{className:\"text-xs text-gray-600 dark:text-gray-400\"},user.job)))),/*#__PURE__*/React.createElement(TableCell,null,/*#__PURE__*/React.createElement(\"span\",{className:\"text-sm\"},\"$ \",user.amount)),/*#__PURE__*/React.createElement(TableCell,null,/*#__PURE__*/React.createElement(Badge,{type:user.status},user.status)),/*#__PURE__*/React.createElement(TableCell,null,/*#__PURE__*/React.createElement(\"span\",{className:\"text-sm\"},new Date(user.date).toLocaleDateString())),/*#__PURE__*/React.createElement(TableCell,null,/*#__PURE__*/React.createElement(\"div\",{className:\"flex items-center space-x-4\"},/*#__PURE__*/React.createElement(Button,{layout:\"link\",size:\"icon\",\"aria-label\":\"Edit\"},/*#__PURE__*/React.createElement(EditIcon,{className:\"w-5 h-5\",\"aria-hidden\":\"true\"})),/*#__PURE__*/React.createElement(Button,{layout:\"link\",size:\"icon\",\"aria-label\":\"Delete\"},/*#__PURE__*/React.createElement(TrashIcon,{className:\"w-5 h-5\",\"aria-hidden\":\"true\"})))));}))),/*#__PURE__*/React.createElement(TableFooter,null,/*#__PURE__*/React.createElement(Pagination,{totalResults:totalResults,resultsPerPage:resultsPerPage,onChange:onPageChangeTable2,label:\"Table navigation\"}))));}export default Tables;","map":{"version":3,"sources":["C:/Users/musta/OneDrive/Desktop/windmill-dashboard-react-master/my-project/src/pages/Tables.js"],"names":["React","useState","useEffect","PageTitle","SectionTitle","Table","TableHeader","TableCell","TableBody","TableRow","TableFooter","TableContainer","Badge","Avatar","Button","Pagination","EditIcon","TrashIcon","response","response2","concat","Tables","pageTable1","setPageTable1","pageTable2","setPageTable2","dataTable1","setDataTable1","dataTable2","setDataTable2","resultsPerPage","totalResults","length","onPageChangeTable1","p","onPageChangeTable2","slice","map","user","i","name","job","amount","status","Date","date","toLocaleDateString"],"mappings":"4MAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,SAA1B,KAA2C,OAA3C,CAEA,MAAOC,CAAAA,SAAP,KAAsB,oCAAtB,CACA,MAAOC,CAAAA,YAAP,KAAyB,uCAAzB,CACA;AACA,OACEC,KADF,CAEEC,WAFF,CAGEC,SAHF,CAIEC,SAJF,CAKEC,QALF,CAMEC,WANF,CAOEC,cAPF,CAQEC,KARF,CASEC,MATF,CAUEC,MAVF,CAWEC,UAXF,KAYO,oBAZP,CAaA,OAASC,QAAT,CAAmBC,SAAnB,KAAoC,UAApC,CAEA,MAAOC,CAAAA,QAAP,KAAqB,yBAArB,CAEA;AACA,GAAMC,CAAAA,SAAS,CAAGD,QAAQ,CAACE,MAAT,CAAgB,EAAhB,CAAlB,CAEA,QAASC,CAAAA,MAAT,EAAkB,CAChB;;;;;;KADgB,CAShB;AATgB,cAUoBpB,QAAQ,CAAC,CAAD,CAV5B,wCAUTqB,UAVS,eAUGC,aAVH,8BAWoBtB,QAAQ,CAAC,CAAD,CAX5B,yCAWTuB,UAXS,eAWGC,aAXH,eAahB;AAbgB,eAcoBxB,QAAQ,CAAC,EAAD,CAd5B,yCAcTyB,UAdS,eAcGC,aAdH,8BAeoB1B,QAAQ,CAAC,EAAD,CAf5B,yCAeT2B,UAfS,eAeGC,aAfH,eAiBhB;AACA,GAAMC,CAAAA,cAAc,CAAG,EAAvB,CACA,GAAMC,CAAAA,YAAY,CAAGb,QAAQ,CAACc,MAA9B,CAEA;AACA,QAASC,CAAAA,kBAAT,CAA4BC,CAA5B,CAA+B,CAC7BX,aAAa,CAACW,CAAD,CAAb,CACD,CAED;AACA,QAASC,CAAAA,kBAAT,CAA4BD,CAA5B,CAA+B,CAC7BT,aAAa,CAACS,CAAD,CAAb,CACD,CAED;AACA;AACAhC,SAAS,CAAC,UAAM,CACdyB,aAAa,CAACT,QAAQ,CAACkB,KAAT,CAAe,CAACd,UAAU,CAAG,CAAd,EAAmBQ,cAAlC,CAAkDR,UAAU,CAAGQ,cAA/D,CAAD,CAAb,CACD,CAFQ,CAEN,CAACR,UAAD,CAFM,CAAT,CAIA;AACA;AACApB,SAAS,CAAC,UAAM,CACd2B,aAAa,CAACV,SAAS,CAACiB,KAAV,CAAgB,CAACZ,UAAU,CAAG,CAAd,EAAmBM,cAAnC,CAAmDN,UAAU,CAAGM,cAAhE,CAAD,CAAb,CACD,CAFQ,CAEN,CAACN,UAAD,CAFM,CAAT,CAIA,mBACE,qDACE,oBAAC,SAAD,kBADF,cAME,oBAAC,YAAD,MANF,cAOE,oBAAC,cAAD,EAAgB,SAAS,CAAC,MAA1B,eACE,oBAAC,KAAD,mBACE,oBAAC,WAAD,mBACE,2CACE,oBAAC,SAAD,eADF,cAEE,oBAAC,SAAD,eAFF,cAGE,oBAAC,SAAD,eAHF,cAIE,oBAAC,SAAD,aAJF,cAKE,oBAAC,SAAD,gBALF,CADF,CADF,cAUE,oBAAC,SAAD,MACGI,UAAU,CAACS,GAAX,CAAe,SAACC,IAAD,CAAOC,CAAP,qBACd,oBAAC,QAAD,EAAU,GAAG,CAAEA,CAAf,eACE,oBAAC,SAAD,mBACE,2BAAK,SAAS,CAAC,2BAAf,eAEE,4CACE,yBAAG,SAAS,CAAC,eAAb,EAA8BD,IAAI,CAACE,IAAnC,CADF,cAEE,yBAAG,SAAS,CAAC,0CAAb,EAAyDF,IAAI,CAACG,GAA9D,CAFF,CAFF,CADF,CADF,cAUE,oBAAC,SAAD,mBACE,4BAAM,SAAS,CAAC,SAAhB,OAA6BH,IAAI,CAACI,MAAlC,CADF,CAVF,cAaE,oBAAC,SAAD,mBACE,oBAAC,KAAD,EAAO,IAAI,CAAEJ,IAAI,CAACK,MAAlB,EAA2BL,IAAI,CAACK,MAAhC,CADF,CAbF,cAgBE,oBAAC,SAAD,mBACE,4BAAM,SAAS,CAAC,SAAhB,EAA2B,GAAIC,CAAAA,IAAJ,CAASN,IAAI,CAACO,IAAd,EAAoBC,kBAApB,EAA3B,CADF,CAhBF,cAmBE,oBAAC,SAAD,mBACE,2BAAK,SAAS,CAAC,6BAAf,eACE,oBAAC,MAAD,EAAQ,MAAM,CAAC,MAAf,CAAsB,IAAI,CAAC,MAA3B,CAAkC,aAAW,MAA7C,eACE,oBAAC,QAAD,EAAU,SAAS,CAAC,SAApB,CAA8B,cAAY,MAA1C,EADF,CADF,cAIE,oBAAC,MAAD,EAAQ,MAAM,CAAC,MAAf,CAAsB,IAAI,CAAC,MAA3B,CAAkC,aAAW,QAA7C,eACE,oBAAC,SAAD,EAAW,SAAS,CAAC,SAArB,CAA+B,cAAY,MAA3C,EADF,CAJF,CADF,CAnBF,CADc,EAAf,CADH,CAVF,CADF,cA8CE,oBAAC,WAAD,mBACE,oBAAC,UAAD,EACE,YAAY,CAAEf,YADhB,CAEE,cAAc,CAAED,cAFlB,CAGE,QAAQ,CAAEK,kBAHZ,CAIE,KAAK,CAAC,kBAJR,EADF,CA9CF,CAPF,CADF,CAiED,CAED,cAAed,CAAAA,MAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\n\nimport PageTitle from '../components/Typography/PageTitle'\nimport SectionTitle from '../components/Typography/SectionTitle'\n// import CTA from '../components/CTA'\nimport {\n  Table,\n  TableHeader,\n  TableCell,\n  TableBody,\n  TableRow,\n  TableFooter,\n  TableContainer,\n  Badge,\n  Avatar,\n  Button,\n  Pagination,\n} from '@windmill/react-ui'\nimport { EditIcon, TrashIcon } from '../icons'\n\nimport response from '../utils/demo/tableData'\n\n// make a copy of the data, for the second table\nconst response2 = response.concat([])\n\nfunction Tables() {\n  /**\n   * DISCLAIMER: This code could be badly improved, but for the sake of the example\n   * and readability, all the logic for both table are here.\n   * You would be better served by dividing each table in its own\n   * component, like Table(?) and TableWithActions(?) hiding the\n   * presentation details away from the page view.\n   */\n\n  // setup pages control for every table\n  const [pageTable1, setPageTable1] = useState(1)\n  const [pageTable2, setPageTable2] = useState(1)\n\n  // setup data for every table\n  const [dataTable1, setDataTable1] = useState([])\n  const [dataTable2, setDataTable2] = useState([])\n\n  // pagination setup\n  const resultsPerPage = 10\n  const totalResults = response.length\n\n  // pagination change control\n  function onPageChangeTable1(p) {\n    setPageTable1(p)\n  }\n\n  // pagination change control\n  function onPageChangeTable2(p) {\n    setPageTable2(p)\n  }\n\n  // on page change, load new sliced data\n  // here you would make another server request for new data\n  useEffect(() => {\n    setDataTable1(response.slice((pageTable1 - 1) * resultsPerPage, pageTable1 * resultsPerPage))\n  }, [pageTable1])\n\n  // on page change, load new sliced data\n  // here you would make another server request for new data\n  useEffect(() => {\n    setDataTable2(response2.slice((pageTable2 - 1) * resultsPerPage, pageTable2 * resultsPerPage))\n  }, [pageTable2])\n\n  return (\n    <>\n      <PageTitle>Inventroy</PageTitle>\n\n  \n\n     \n      <SectionTitle></SectionTitle>\n      <TableContainer className=\"mb-8\">\n        <Table>\n          <TableHeader>\n            <tr>\n              <TableCell>Client</TableCell>\n              <TableCell>Amount</TableCell>\n              <TableCell>Status</TableCell>\n              <TableCell>Date</TableCell>\n              <TableCell>Actions</TableCell>\n            </tr>\n          </TableHeader>\n          <TableBody>\n            {dataTable2.map((user, i) => (\n              <TableRow key={i}>\n                <TableCell>\n                  <div className=\"flex items-center text-sm\">\n                    {/* <Avatar className=\"hidden mr-3 md:block\" src={user.avatar} alt=\"User avatar\" /> */}\n                    <div>\n                      <p className=\"font-semibold\">{user.name}</p>\n                      <p className=\"text-xs text-gray-600 dark:text-gray-400\">{user.job}</p>\n                    </div>\n                  </div>\n                </TableCell>\n                <TableCell>\n                  <span className=\"text-sm\">$ {user.amount}</span>\n                </TableCell>\n                <TableCell>\n                  <Badge type={user.status}>{user.status}</Badge>\n                </TableCell>\n                <TableCell>\n                  <span className=\"text-sm\">{new Date(user.date).toLocaleDateString()}</span>\n                </TableCell>\n                <TableCell>\n                  <div className=\"flex items-center space-x-4\">\n                    <Button layout=\"link\" size=\"icon\" aria-label=\"Edit\">\n                      <EditIcon className=\"w-5 h-5\" aria-hidden=\"true\" />\n                    </Button>\n                    <Button layout=\"link\" size=\"icon\" aria-label=\"Delete\">\n                      <TrashIcon className=\"w-5 h-5\" aria-hidden=\"true\" />\n                    </Button>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        <TableFooter>\n          <Pagination\n            totalResults={totalResults}\n            resultsPerPage={resultsPerPage}\n            onChange={onPageChangeTable2}\n            label=\"Table navigation\"\n          />\n        </TableFooter>\n      </TableContainer>\n    </>\n  )\n}\n\nexport default Tables\n"]},"metadata":{},"sourceType":"module"}