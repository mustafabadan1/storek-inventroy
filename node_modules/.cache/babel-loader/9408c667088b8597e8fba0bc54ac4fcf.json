{"ast":null,"code":"// import React from 'react'\n// import { useTable, useFilters, useGlobalFilter, useAsyncDebounce, useSortBy, usePagination } from 'react-table'\n// import { ChevronDoubleLeftIcon, ChevronLeftIcon, ChevronRightIcon, ChevronDoubleRightIcon } from '@heroicons/react/solid'\n// import { Button, PageButton } from './shared/Button'\n// import { classNames } from './shared/Utils'\n// import { SortIcon, SortUpIcon, SortDownIcon } from './shared/Icons'\n// // Define a default UI for filtering\n// function GlobalFilter({\n//   preGlobalFilteredRows,\n//   globalFilter,\n//   setGlobalFilter,\n// }) {\n//   const count = preGlobalFilteredRows.length\n//   const [value, setValue] = React.useState(globalFilter)\n//   const onChange = useAsyncDebounce(value => {\n//     setGlobalFilter(value || undefined)\n//   }, 200)\n//   return (\n//     <label className=\"flex gap-x-2 items-baseline\">\n//       <span className=\"text-gray-700\">Search: </span>\n//       <input\n//         type=\"text\"\n//         className=\"rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50\"\n//         value={value || \"\"}\n//         onChange={e => {\n//           setValue(e.target.value);\n//           onChange(e.target.value);\n//         }}\n//         placeholder={`${count} records...`}\n//       />\n//     </label>\n//   )\n// }\n// // This is a custom filter UI for selecting\n// // a unique option from a list\n// export function SelectColumnFilter({\n//   column: { filterValue, setFilter, preFilteredRows, id, render },\n// }) {\n//   // Calculate the options for filtering\n//   // using the preFilteredRows\n//   const options = React.useMemo(() => {\n//     const options = new Set()\n//     preFilteredRows.forEach(row => {\n//       options.add(row.values[id])\n//     })\n//     return [...options.values()]\n//   }, [id, preFilteredRows])\n//   // Render a multi-select box\n//   return (\n//     <label className=\"flex gap-x-2 items-baseline\">\n//       <span className=\"text-gray-700\">{render(\"Header\")}: </span>\n//       <select\n//         className=\"rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50\"\n//         name={id}\n//         id={id}\n//         value={filterValue}\n//         onChange={e => {\n//           setFilter(e.target.value || undefined)\n//         }}\n//       >\n//         <option value=\"\">All</option>\n//         {options.map((option, i) => (\n//           <option key={i} value={option}>\n//             {option}\n//           </option>\n//         ))}\n//       </select>\n//     </label>\n//   )\n// }\n// export function StatusPill({ value }) {\n//   const status = value ? value.toLowerCase() : \"unknown\";\n//   return (\n//     <span\n//       className={\n//         classNames(\n//           \"px-3 py-1 uppercase leading-wide font-bold text-xs rounded-full shadow-sm\",\n//           status.startsWith(\"active\") ? \"bg-green-100 text-green-800\" : null,\n//           status.startsWith(\"inactive\") ? \"bg-yellow-100 text-yellow-800\" : null,\n//           status.startsWith(\"offline\") ? \"bg-red-100 text-red-800\" : null,\n//         )\n//       }\n//     >\n//       {status}\n//     </span>\n//   );\n// };\n// export function AvatarCell({ value, column, row }) {\n//   return (\n//     <div className=\"flex items-center\">\n//       <div className=\"flex-shrink-0 h-10 w-10\">\n//         <img className=\"h-10 w-10 rounded-full\" src={row.original[column.imgAccessor]} alt=\"\" />\n//       </div>\n//       <div className=\"ml-4\">\n//         <div className=\"text-sm font-medium text-gray-900\">{value}</div>\n//         <div className=\"text-sm text-gray-500\">{row.original[column.emailAccessor]}</div>\n//       </div>\n//     </div>\n//   )\n// }\n// function Table({ columns, data }) {\n//   // Use the state and functions returned from useTable to build your UI\n//   const {\n//     getTableProps,\n//     getTableBodyProps,\n//     headerGroups,\n//     prepareRow,\n//     page, // Instead of using 'rows', we'll use page,\n//     // which has only the rows for the active page\n//     // The rest of these things are super handy, too ;)\n//     canPreviousPage,\n//     canNextPage,\n//     pageOptions,\n//     pageCount,\n//     gotoPage,\n//     nextPage,\n//     previousPage,\n//     setPageSize,\n//     state,\n//     preGlobalFilteredRows,\n//     setGlobalFilter,\n//   } = useTable({\n//     columns,\n//     data,\n//   },\n//     useFilters, // useFilters!\n//     useGlobalFilter,\n//     useSortBy,\n//     usePagination,  // new\n//   )\n//   // Render the UI for your table\n//   return (\n//     <>\n//       <div className=\"sm:flex sm:gap-x-2\">\n//         <GlobalFilter\n//           preGlobalFilteredRows={preGlobalFilteredRows}\n//           globalFilter={state.globalFilter}\n//           setGlobalFilter={setGlobalFilter}\n//         />\n//         {headerGroups.map((headerGroup) =>\n//           headerGroup.headers.map((column) =>\n//             column.Filter ? (\n//               <div className=\"mt-2 sm:mt-0\" key={column.id}>\n//                 {column.render(\"Filter\")}\n//               </div>\n//             ) : null\n//           )\n//         )}\n//       </div>\n//       {/* table */}\n//       <div className=\"mt-4 flex flex-col\">\n//         <div className=\"-my-2 overflow-x-auto -mx-4 sm:-mx-6 lg:-mx-8\">\n//           <div className=\"py-2 align-middle inline-block min-w-full sm:px-6 lg:px-8\">\n//             <div className=\"shadow overflow-hidden border-b border-gray-200 sm:rounded-lg\">\n//               <table {...getTableProps()} className=\"min-w-full divide-y divide-gray-200\">\n//                 <thead className=\"bg-gray-50\">\n//                   {headerGroups.map(headerGroup => (\n//                     <tr {...headerGroup.getHeaderGroupProps()}>\n//                       {headerGroup.headers.map(column => (\n//                         // Add the sorting props to control sorting. For this example\n//                         // we can add them into the header props\n//                         <th\n//                           scope=\"col\"\n//                           className=\"group px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\"\n//                           {...column.getHeaderProps(column.getSortByToggleProps())}\n//                         >\n//                           <div className=\"flex items-center justify-between\">\n//                             {column.render('Header')}\n//                             {/* Add a sort direction indicator */}\n//                             <span>\n//                               {column.isSorted\n//                                 ? column.isSortedDesc\n//                                   ? <SortDownIcon className=\"w-4 h-4 text-gray-400\" />\n//                                   : <SortUpIcon className=\"w-4 h-4 text-gray-400\" />\n//                                 : (\n//                                   <SortIcon className=\"w-4 h-4 text-gray-400 opacity-0 group-hover:opacity-100\" />\n//                                 )}\n//                             </span>\n//                           </div>\n//                         </th>\n//                       ))}\n//                     </tr>\n//                   ))}\n//                 </thead>\n//                 <tbody\n//                   {...getTableBodyProps()}\n//                   className=\"bg-white divide-y divide-gray-200\"\n//                 >\n//                   {page.map((row, i) => {  // new\n//                     prepareRow(row)\n//                     return (\n//                       <tr {...row.getRowProps()}>\n//                         {row.cells.map(cell => {\n//                           return (\n//                             <td\n//                               {...cell.getCellProps()}\n//                               className=\"px-6 py-4 whitespace-nowrap\"\n//                               role=\"cell\"\n//                             >\n//                               {cell.column.Cell.name === \"defaultRenderer\"\n//                                 ? <div className=\"text-sm text-gray-500\">{cell.render('Cell')}</div>\n//                                 : cell.render('Cell')\n//                               }\n//                             </td>\n//                           )\n//                         })}\n//                       </tr>\n//                     )\n//                   })}\n//                 </tbody>\n//               </table>\n//             </div>\n//           </div>\n//         </div>\n//       </div>\n//       {/* Pagination */}\n//       <div className=\"py-3 flex items-center justify-between\">\n//         <div className=\"flex-1 flex justify-between sm:hidden\">\n//           <Button onClick={() => previousPage()} disabled={!canPreviousPage}>Previous</Button>\n//           <Button onClick={() => nextPage()} disabled={!canNextPage}>Next</Button>\n//         </div>\n//         <div className=\"hidden sm:flex-1 sm:flex sm:items-center sm:justify-between\">\n//           <div className=\"flex gap-x-2 items-baseline\">\n//             <span className=\"text-sm text-gray-700\">\n//               Page <span className=\"font-medium\">{state.pageIndex + 1}</span> of <span className=\"font-medium\">{pageOptions.length}</span>\n//             </span>\n//             <label>\n//               <span className=\"sr-only\">Items Per Page</span>\n//               <select\n//                 className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50\"\n//                 value={state.pageSize}\n//                 onChange={e => {\n//                   setPageSize(Number(e.target.value))\n//                 }}\n//               >\n//                 {[5, 10, 20].map(pageSize => (\n//                   <option key={pageSize} value={pageSize}>\n//                     Show {pageSize}\n//                   </option>\n//                 ))}\n//               </select>\n//             </label>\n//           </div>\n//           <div>\n//             <nav className=\"relative z-0 inline-flex rounded-md shadow-sm -space-x-px\" aria-label=\"Pagination\">\n//               <PageButton\n//                 className=\"rounded-l-md\"\n//                 onClick={() => gotoPage(0)}\n//                 disabled={!canPreviousPage}\n//               >\n//                 <span className=\"sr-only\">First</span>\n//                 <ChevronDoubleLeftIcon className=\"h-5 w-5 text-gray-400\" aria-hidden=\"true\" />\n//               </PageButton>\n//               <PageButton\n//                 onClick={() => previousPage()}\n//                 disabled={!canPreviousPage}\n//               >\n//                 <span className=\"sr-only\">Previous</span>\n//                 <ChevronLeftIcon className=\"h-5 w-5 text-gray-400\" aria-hidden=\"true\" />\n//               </PageButton>\n//               <PageButton\n//                 onClick={() => nextPage()}\n//                 disabled={!canNextPage\n//                 }>\n//                 <span className=\"sr-only\">Next</span>\n//                 <ChevronRightIcon className=\"h-5 w-5 text-gray-400\" aria-hidden=\"true\" />\n//               </PageButton>\n//               <PageButton\n//                 className=\"rounded-r-md\"\n//                 onClick={() => gotoPage(pageCount - 1)}\n//                 disabled={!canNextPage}\n//               >\n//                 <span className=\"sr-only\">Last</span>\n//                 <ChevronDoubleRightIcon className=\"h-5 w-5 text-gray-400\" aria-hidden=\"true\" />\n//               </PageButton>\n//             </nav>\n//           </div>\n//         </div>\n//       </div>\n//     </>\n//   )\n// }\n// export default Table;","map":{"version":3,"sources":["C:/Users/musta/OneDrive/Desktop/windmill-dashboard-react-master/my-project/src/components/TableDitels.js"],"names":[],"mappingssourcesContent":["// import React from 'react'\r\n// import { useTable, useFilters, useGlobalFilter, useAsyncDebounce, useSortBy, usePagination } from 'react-table'\r\n// import { ChevronDoubleLeftIcon, ChevronLeftIcon, ChevronRightIcon, ChevronDoubleRightIcon } from '@heroicons/react/solid'\r\n// import { Button, PageButton } from './shared/Button'\r\n// import { classNames } from './shared/Utils'\r\n// import { SortIcon, SortUpIcon, SortDownIcon } from './shared/Icons'\r\n\r\n// // Define a default UI for filtering\r\n// function GlobalFilter({\r\n//   preGlobalFilteredRows,\r\n//   globalFilter,\r\n//   setGlobalFilter,\r\n// }) {\r\n//   const count = preGlobalFilteredRows.length\r\n//   const [value, setValue] = React.useState(globalFilter)\r\n//   const onChange = useAsyncDebounce(value => {\r\n//     setGlobalFilter(value || undefined)\r\n//   }, 200)\r\n\r\n//   return (\r\n//     <label className=\"flex gap-x-2 items-baseline\">\r\n//       <span className=\"text-gray-700\">Search: </span>\r\n//       <input\r\n//         type=\"text\"\r\n//         className=\"rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50\"\r\n//         value={value || \"\"}\r\n//         onChange={e => {\r\n//           setValue(e.target.value);\r\n//           onChange(e.target.value);\r\n//         }}\r\n//         placeholder={`${count} records...`}\r\n//       />\r\n//     </label>\r\n//   )\r\n// }\r\n\r\n// // This is a custom filter UI for selecting\r\n// // a unique option from a list\r\n// export function SelectColumnFilter({\r\n//   column: { filterValue, setFilter, preFilteredRows, id, render },\r\n// }) {\r\n//   // Calculate the options for filtering\r\n//   // using the preFilteredRows\r\n//   const options = React.useMemo(() => {\r\n//     const options = new Set()\r\n//     preFilteredRows.forEach(row => {\r\n//       options.add(row.values[id])\r\n//     })\r\n//     return [...options.values()]\r\n//   }, [id, preFilteredRows])\r\n\r\n//   // Render a multi-select box\r\n//   return (\r\n//     <label className=\"flex gap-x-2 items-baseline\">\r\n//       <span className=\"text-gray-700\">{render(\"Header\")}: </span>\r\n//       <select\r\n//         className=\"rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50\"\r\n//         name={id}\r\n//         id={id}\r\n//         value={filterValue}\r\n//         onChange={e => {\r\n//           setFilter(e.target.value || undefined)\r\n//         }}\r\n//       >\r\n//         <option value=\"\">All</option>\r\n//         {options.map((option, i) => (\r\n//           <option key={i} value={option}>\r\n//             {option}\r\n//           </option>\r\n//         ))}\r\n//       </select>\r\n//     </label>\r\n//   )\r\n// }\r\n\r\n// export function StatusPill({ value }) {\r\n//   const status = value ? value.toLowerCase() : \"unknown\";\r\n\r\n//   return (\r\n//     <span\r\n//       className={\r\n//         classNames(\r\n//           \"px-3 py-1 uppercase leading-wide font-bold text-xs rounded-full shadow-sm\",\r\n//           status.startsWith(\"active\") ? \"bg-green-100 text-green-800\" : null,\r\n//           status.startsWith(\"inactive\") ? \"bg-yellow-100 text-yellow-800\" : null,\r\n//           status.startsWith(\"offline\") ? \"bg-red-100 text-red-800\" : null,\r\n//         )\r\n//       }\r\n//     >\r\n//       {status}\r\n//     </span>\r\n//   );\r\n// };\r\n\r\n// export function AvatarCell({ value, column, row }) {\r\n//   return (\r\n//     <div className=\"flex items-center\">\r\n//       <div className=\"flex-shrink-0 h-10 w-10\">\r\n//         <img className=\"h-10 w-10 rounded-full\" src={row.original[column.imgAccessor]} alt=\"\" />\r\n//       </div>\r\n//       <div className=\"ml-4\">\r\n//         <div className=\"text-sm font-medium text-gray-900\">{value}</div>\r\n//         <div className=\"text-sm text-gray-500\">{row.original[column.emailAccessor]}</div>\r\n//       </div>\r\n//     </div>\r\n//   )\r\n// }\r\n\r\n// function Table({ columns, data }) {\r\n//   // Use the state and functions returned from useTable to build your UI\r\n//   const {\r\n//     getTableProps,\r\n//     getTableBodyProps,\r\n//     headerGroups,\r\n//     prepareRow,\r\n//     page, // Instead of using 'rows', we'll use page,\r\n//     // which has only the rows for the active page\r\n\r\n//     // The rest of these things are super handy, too ;)\r\n//     canPreviousPage,\r\n//     canNextPage,\r\n//     pageOptions,\r\n//     pageCount,\r\n//     gotoPage,\r\n//     nextPage,\r\n//     previousPage,\r\n//     setPageSize,\r\n\r\n//     state,\r\n//     preGlobalFilteredRows,\r\n//     setGlobalFilter,\r\n//   } = useTable({\r\n//     columns,\r\n//     data,\r\n//   },\r\n//     useFilters, // useFilters!\r\n//     useGlobalFilter,\r\n//     useSortBy,\r\n//     usePagination,  // new\r\n//   )\r\n\r\n//   // Render the UI for your table\r\n//   return (\r\n//     <>\r\n//       <div className=\"sm:flex sm:gap-x-2\">\r\n//         <GlobalFilter\r\n//           preGlobalFilteredRows={preGlobalFilteredRows}\r\n//           globalFilter={state.globalFilter}\r\n//           setGlobalFilter={setGlobalFilter}\r\n//         />\r\n//         {headerGroups.map((headerGroup) =>\r\n//           headerGroup.headers.map((column) =>\r\n//             column.Filter ? (\r\n//               <div className=\"mt-2 sm:mt-0\" key={column.id}>\r\n//                 {column.render(\"Filter\")}\r\n//               </div>\r\n//             ) : null\r\n//           )\r\n//         )}\r\n//       </div>\r\n//       {/* table */}\r\n//       <div className=\"mt-4 flex flex-col\">\r\n//         <div className=\"-my-2 overflow-x-auto -mx-4 sm:-mx-6 lg:-mx-8\">\r\n//           <div className=\"py-2 align-middle inline-block min-w-full sm:px-6 lg:px-8\">\r\n//             <div className=\"shadow overflow-hidden border-b border-gray-200 sm:rounded-lg\">\r\n//               <table {...getTableProps()} className=\"min-w-full divide-y divide-gray-200\">\r\n//                 <thead className=\"bg-gray-50\">\r\n//                   {headerGroups.map(headerGroup => (\r\n//                     <tr {...headerGroup.getHeaderGroupProps()}>\r\n//                       {headerGroup.headers.map(column => (\r\n//                         // Add the sorting props to control sorting. For this example\r\n//                         // we can add them into the header props\r\n//                         <th\r\n//                           scope=\"col\"\r\n//                           className=\"group px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\"\r\n//                           {...column.getHeaderProps(column.getSortByToggleProps())}\r\n//                         >\r\n//                           <div className=\"flex items-center justify-between\">\r\n//                             {column.render('Header')}\r\n//                             {/* Add a sort direction indicator */}\r\n//                             <span>\r\n//                               {column.isSorted\r\n//                                 ? column.isSortedDesc\r\n//                                   ? <SortDownIcon className=\"w-4 h-4 text-gray-400\" />\r\n//                                   : <SortUpIcon className=\"w-4 h-4 text-gray-400\" />\r\n//                                 : (\r\n//                                   <SortIcon className=\"w-4 h-4 text-gray-400 opacity-0 group-hover:opacity-100\" />\r\n//                                 )}\r\n//                             </span>\r\n//                           </div>\r\n//                         </th>\r\n//                       ))}\r\n//                     </tr>\r\n//                   ))}\r\n//                 </thead>\r\n//                 <tbody\r\n//                   {...getTableBodyProps()}\r\n//                   className=\"bg-white divide-y divide-gray-200\"\r\n//                 >\r\n//                   {page.map((row, i) => {  // new\r\n//                     prepareRow(row)\r\n//                     return (\r\n//                       <tr {...row.getRowProps()}>\r\n//                         {row.cells.map(cell => {\r\n//                           return (\r\n//                             <td\r\n//                               {...cell.getCellProps()}\r\n//                               className=\"px-6 py-4 whitespace-nowrap\"\r\n//                               role=\"cell\"\r\n//                             >\r\n//                               {cell.column.Cell.name === \"defaultRenderer\"\r\n//                                 ? <div className=\"text-sm text-gray-500\">{cell.render('Cell')}</div>\r\n//                                 : cell.render('Cell')\r\n//                               }\r\n//                             </td>\r\n//                           )\r\n//                         })}\r\n//                       </tr>\r\n//                     )\r\n//                   })}\r\n//                 </tbody>\r\n//               </table>\r\n//             </div>\r\n//           </div>\r\n//         </div>\r\n//       </div>\r\n//       {/* Pagination */}\r\n//       <div className=\"py-3 flex items-center justify-between\">\r\n//         <div className=\"flex-1 flex justify-between sm:hidden\">\r\n//           <Button onClick={() => previousPage()} disabled={!canPreviousPage}>Previous</Button>\r\n//           <Button onClick={() => nextPage()} disabled={!canNextPage}>Next</Button>\r\n//         </div>\r\n//         <div className=\"hidden sm:flex-1 sm:flex sm:items-center sm:justify-between\">\r\n//           <div className=\"flex gap-x-2 items-baseline\">\r\n//             <span className=\"text-sm text-gray-700\">\r\n//               Page <span className=\"font-medium\">{state.pageIndex + 1}</span> of <span className=\"font-medium\">{pageOptions.length}</span>\r\n//             </span>\r\n//             <label>\r\n//               <span className=\"sr-only\">Items Per Page</span>\r\n//               <select\r\n//                 className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50\"\r\n//                 value={state.pageSize}\r\n//                 onChange={e => {\r\n//                   setPageSize(Number(e.target.value))\r\n//                 }}\r\n//               >\r\n//                 {[5, 10, 20].map(pageSize => (\r\n//                   <option key={pageSize} value={pageSize}>\r\n//                     Show {pageSize}\r\n//                   </option>\r\n//                 ))}\r\n//               </select>\r\n//             </label>\r\n//           </div>\r\n//           <div>\r\n//             <nav className=\"relative z-0 inline-flex rounded-md shadow-sm -space-x-px\" aria-label=\"Pagination\">\r\n//               <PageButton\r\n//                 className=\"rounded-l-md\"\r\n//                 onClick={() => gotoPage(0)}\r\n//                 disabled={!canPreviousPage}\r\n//               >\r\n//                 <span className=\"sr-only\">First</span>\r\n//                 <ChevronDoubleLeftIcon className=\"h-5 w-5 text-gray-400\" aria-hidden=\"true\" />\r\n//               </PageButton>\r\n//               <PageButton\r\n//                 onClick={() => previousPage()}\r\n//                 disabled={!canPreviousPage}\r\n//               >\r\n//                 <span className=\"sr-only\">Previous</span>\r\n//                 <ChevronLeftIcon className=\"h-5 w-5 text-gray-400\" aria-hidden=\"true\" />\r\n//               </PageButton>\r\n//               <PageButton\r\n//                 onClick={() => nextPage()}\r\n//                 disabled={!canNextPage\r\n//                 }>\r\n//                 <span className=\"sr-only\">Next</span>\r\n//                 <ChevronRightIcon className=\"h-5 w-5 text-gray-400\" aria-hidden=\"true\" />\r\n//               </PageButton>\r\n//               <PageButton\r\n//                 className=\"rounded-r-md\"\r\n//                 onClick={() => gotoPage(pageCount - 1)}\r\n//                 disabled={!canNextPage}\r\n//               >\r\n//                 <span className=\"sr-only\">Last</span>\r\n//                 <ChevronDoubleRightIcon className=\"h-5 w-5 text-gray-400\" aria-hidden=\"true\" />\r\n//               </PageButton>\r\n//             </nav>\r\n//           </div>\r\n//         </div>\r\n//       </div>\r\n//     </>\r\n//   )\r\n// }\r\n\r\n// export default Table;"]},"metadata":{},"sourceType":"module"}